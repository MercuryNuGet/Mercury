{"name":"Mercury","tagline":"Fluent NUnit test extensions","body":"# Mercury\r\nFluent NUnit specification extensions that will run under NCrunch, and ReSharper test runners.\r\n\r\n#Get started\r\n\r\n##NuGet\r\n\r\n```\r\ninstall-package mercury -pre\r\n```\r\n\r\n##Inherit\r\n\r\nInherit from `Specification` and implement members. Return an empty array of `ISpecification`. In this array is where you will list your specifications.\r\n\r\n```\r\nusing Mercury;\r\nusing NUnit.Framework;\r\n\r\nnamespace MercuryExample\r\n{\r\n  public class MyTest : Specification\r\n  {\r\n    protected override ISpecification[] TestCases()\r\n    {\r\n        return new ISpecification[]\r\n        {\r\n\r\n        };\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n##Write specifications\r\n\r\nYou can copy and paste these examples directly into the array then run the tests with your favorite test runner.\r\n\r\n###Single assert, no setup\r\n\r\nSimplest spec is just a name and an assert:\r\n\r\n```\r\n\"Simple assert\".Assert(() => Assert.AreEqual(2, 1 + 1)),\r\n```\r\n\r\nThis will emit a single unit test with the text \"Simple assert\" included in the test name.\r\n\r\n###Arrange\r\n\r\nNext most complex is an `Arrange`, this is equivalent to an NUnit `[SetUp]` and runs for each `Assert`,`With` combination (`With`'s are explained later):\r\n\r\n```\r\n\"New List\"\r\n   .Arrange(() => new List<int>())\r\n   .Assert(\"is empty\", list => Assert.AreEqual(0, list.Count)),\r\n```\r\n\r\n###Act\r\n\r\nYou can separate out the `Act` from the `Assert`. Here the act invokes `Any()` and the result is passed to the `Assert`.\r\n\r\n```\r\n\"New List; linq says there is not any\"\r\n   .Arrange(() => new List<int>())\r\n   .Act(list => list.Any())\r\n   .Assert(any => Assert.IsFalse(any)),\r\n```\r\n\r\n###With\r\n\r\n`With` enables you to parameterise your tests. It takes a `dynamic`, so you can set up an anoymous type.\r\n\r\n```\r\n\"When I add an item to list\"\r\n   .Arrange(() => new List<int>())\r\n   .With(new {a=1})\r\n   .Act((list, data) =>\r\n   {\r\n     list.Add(data.a);\r\n     return list;\r\n   })\r\n   .Assert(\"it is exactly one long\",\r\n      (list, data) => Assert.AreEqual(1, list.Count)),\r\n```\r\n\r\n###Multiple Withs and parameter injection to test name\r\n\r\nUse the `#` symbol to inject named parameters from your `With` data.\r\n\r\n```\r\n\"When I add #a item to list\"\r\n   .Arrange(() => new List<int>())\r\n   .With(new {a=1})\r\n   .With(new {a=2})\r\n   .Act((list, data) =>\r\n   {\r\n      list.Add(data.a);\r\n      return list;\r\n   })\r\n   .Assert(\"it is exactly one long\",\r\n      (list, data) => Assert.AreEqual(1, list.Count)),\r\n```\r\n\r\nThis emits two tests:\r\n\r\n```\r\nWhen I add 1 item to list it is exactly one long\r\nWhen I add 2 item to list it is exactly one long\r\n```\r\n\r\n###Multiple Withs and Asserts\r\n\r\nThe total number of tests emitted is the number of `Assert`s multiplied by the number of `With`s. This test below therefore runs 4 tests.\r\n\r\n```\r\n\"When I add #a to list\"\r\n   .Arrange(() => new List<int>())\r\n   .With(new {a=1})\r\n   .With(new {a=2})\r\n   .Act((list, data) =>\r\n   {\r\n      list.Add(data.a);\r\n      return list;\r\n   })\r\n   .Assert(\"it is exactly one long\",\r\n      (list, data) => Assert.AreEqual(1, list.Count))\r\n   .Assert(\"and contains #a\",\r\n      (list, data) => Assert.AreEqual(data.a, list[0])),\r\n```\r\n\r\n###Place expected values in the data\r\n\r\nWhere each `With` will generate a different expected value, include those expected values in the `With` data.\r\n\r\n```\r\n\"When I add #expectedLength items to list\"\r\n   .Arrange(() => new List<int>())\r\n   .With(new {a=new []{1,2,3},   expectedLength=3, expectedSum=6})\r\n   .With(new {a=new []{4,6,7,9}, expectedLength=4, expectedSum=26})\r\n   .Act((list, data) =>\r\n   {\r\n      list.AddRange(data.a);\r\n      return list;\r\n   })\r\n   .Assert(\"it is exactly #expectedLength long\",\r\n      (list, data) => Assert.AreEqual(data.expectedLength, list.Count))\r\n   .Assert(\"and the sum is #expectedSum\",\r\n      (list, data) => Assert.AreEqual(data.expectedSum, list.Sum())),\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}