// Code generated by a template
using System;
using Mercury.AssertBuilder;
using System.Collections.Generic;

namespace Mercury {

  public interface IArrangedWithData<out TSut, TData1, TData2, TData3, TData4, TData5>
  {
     IAssertWithDataCaseBuilder<TPostAct, TData1, TData2, TData3, TData4, TData5> Act<TPostAct>(Func<TSut, TData1, TData2, TData3, TData4, TData5, TPostAct> actFunc);
     IArrangedWithData<TSut, TData1, TData2, TData3, TData4, TData5> With(TData1 data1, TData2 data2, TData3 data3, TData4 data4, TData5 data5);
  }

  public interface IAssertWithDataCaseBuilder<out TSut, out TData1, out TData2, out TData3, out TData4, out TData5>
  {
      IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(Action<TSut, TData1, TData2, TData3, TData4, TData5> assertAction);
      IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(string assertionTestCaseName, Action<TSut, TData1, TData2, TData3, TData4, TData5> assertAction);
  }

  public interface IPostAssertWithDataCaseBuilder<out TSut, out TData1, out TData2, out TData3, out TData4, out TData5> : ISpecification,
        IAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5>
  {
  }

  internal sealed class DataAssertBuilder<TSut, TData1, TData2, TData3, TData4, TData5> : IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5>
  {
        private readonly TestCaseAccumulator _tests = new TestCaseAccumulator();
        private readonly Func<TData1, TData2, TData3, TData4, TData5, TSut> _actFunc;
        private readonly IDataSuite<Tuple<TData1, TData2, TData3, TData4, TData5>> _dataSuite;

        public DataAssertBuilder(Func<TData1, TData2, TData3, TData4, TData5, TSut> actFunc, IDataSuite<Tuple<TData1, TData2, TData3, TData4, TData5>> dataSuite)
        {
            _actFunc = actFunc;
            _dataSuite = dataSuite;
        }

        public IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(Action<TSut, TData1, TData2, TData3, TData4, TData5> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName, assertMethod);
            return this;
        }

        public IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(string assertionTestCaseName,
            Action<TSut, TData1, TData2, TData3, TData4, TData5> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName + " " + assertionTestCaseName, assertMethod);
            return this;
        }

        private void InternalAssert(string testName, Action<TSut, TData1, TData2, TData3, TData4, TData5> assertMethod)
        {
            foreach (var data in _dataSuite.Data)
            {
                var d = data;
                string inject = NameInjection.Inject(testName, d);
                Action assertTestMethod = () =>
                {
                    TSut acted = _actFunc(d.Item1, d.Item2, d.Item3, d.Item4, d.Item5);
                    assertMethod(acted, d.Item1, d.Item2, d.Item3, d.Item4, d.Item5);
                };
                _tests.AddSingleTest(inject, assertTestMethod);
            }
        }

        public IEnumerable<ISingleRunnableTestCase> EmitAllRunnableTests()
        {
            return _tests.EmitAllRunnableTests();
        }
    }

	internal sealed class DataPreAssertBuilder<TSut, TData1, TData2, TData3, TData4, TData5> : IAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5>
    {
        private readonly Func<TData1, TData2, TData3, TData4, TData5, TSut> _actFunc;
        private readonly IDataSuite<Tuple<TData1, TData2, TData3, TData4, TData5>> _dataSuite;

        public DataPreAssertBuilder(Func<TData1, TData2, TData3, TData4, TData5, TSut> actFunc, IDataSuite<Tuple<TData1, TData2, TData3, TData4, TData5>> dataSuite)
        {
            _actFunc = actFunc;
            _dataSuite = dataSuite;
        }

        public IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(Action<TSut, TData1, TData2, TData3, TData4, TData5> assertAction)
        {
            return new DataAssertBuilder<TSut, TData1, TData2, TData3, TData4, TData5>(_actFunc, _dataSuite).Assert(assertAction);
        }

        public IPostAssertWithDataCaseBuilder<TSut, TData1, TData2, TData3, TData4, TData5> Assert(string assertionTestCaseName,
            Action<TSut, TData1, TData2, TData3, TData4, TData5> assertAction)
        {
            return new DataAssertBuilder<TSut, TData1, TData2, TData3, TData4, TData5>(_actFunc, _dataSuite).Assert(assertionTestCaseName,
                assertAction);
        }
    }

	internal sealed class ArrangedDataBuilder<TSut, TData1, TData2, TData3, TData4, TData5> : IArrangedWithData<TSut, TData1, TData2, TData3, TData4, TData5>, IDataSuite<Tuple<TData1, TData2, TData3, TData4, TData5>>
    {
        private readonly ISuite _suite;
        private readonly Func<TSut> _arrangeFunc;
        private readonly List<Tuple<TData1, TData2, TData3, TData4, TData5>> _data = new List<Tuple<TData1, TData2, TData3, TData4, TData5>>();

        public ArrangedDataBuilder(ISuite suite, Func<TSut> arrangeFunc)
        {
            _suite = suite;
            _arrangeFunc = arrangeFunc;
        }

        public IAssertWithDataCaseBuilder<TPostAct, TData1, TData2, TData3, TData4, TData5> Act<TPostAct>(Func<TSut, TData1, TData2, TData3, TData4, TData5, TPostAct> actFunc)
        {
            return new DataPreAssertBuilder<TPostAct, TData1, TData2, TData3, TData4, TData5>(
                (data1, data2, data3, data4, data5) =>
                {
                    var arranged = _arrangeFunc();
                    return actFunc(arranged, data1, data2, data3, data4, data5);
                }, this);
        }

        public IArrangedWithData<TSut, TData1, TData2, TData3, TData4, TData5> With(TData1 data1, TData2 data2, TData3 data3, TData4 data4, TData5 data5)
        {
            _data.Add(Tuple.Create(data1, data2, data3, data4, data5));
            return this;
        }

        public string SuiteName
        {
            get { return _suite.SuiteName; }
        }

        public IEnumerable<Tuple<TData1, TData2, TData3, TData4, TData5>> Data
        {
            get { return _data; }
        }
    }
}
