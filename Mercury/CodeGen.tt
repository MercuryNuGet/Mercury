<#@ template language="C#" hostspecific="True"#>
<#@include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
// Code generated by a template
using System;
using Mercury.AssertBuilder;

namespace Mercury {

<# manager.EndBlock(); #>

<#

for(int i=2;i<5;i++)
{
  manager.StartNewFile("DataX"+i+".generated.cs");
  var data = "";
  var preData = "";
  var outData = "";
  for(int d = 1; d<=i; d++)
  {
    data += ", TData"+d;
	preData += "TData"+d + ", ";
	outData +=  ", out TData"+d;
  }

  #>

  public interface IAssertWithDataCaseBuilder<out TSut<# Write(outData); #>>
  {
      IPostAssertWithDataCaseBuilder<TSut<# Write(data); #>> Assert(Action<TSut<# Write(data); #>> assertAction);
      IPostAssertWithDataCaseBuilder<TSut<# Write(data); #>> Assert(string assertionTestCaseName, Action<TSut<# Write(data); #>> assertAction);
  }

   public interface IPostAssertWithDataCaseBuilder<out TSut<# Write(outData); #>> : ISpecification,
        IAssertWithDataCaseBuilder<TSut<# Write(data); #>>
  {
  }

  internal sealed class DataAssertBuilder<TSut<# Write(data); #>> : IPostAssertWithDataCaseBuilder<TSut<# Write(data); #>>
    {
        private readonly TestCaseAccumulator _tests = new TestCaseAccumulator();
        private readonly Func<<# Write(preData); #>TSut> _actFunc;
        private readonly IDataSuite<TData> _dataSuite;

        public DataAssertBuilder(Func<<# Write(preData); #>TSut> actFunc, IDataSuite<TData> dataSuite)
        {
            _actFunc = actFunc;
            _dataSuite = dataSuite;
        }

        public IPostAssertWithDataCaseBuilder<TSut<# Write(data); #>> Assert(Action<TSut<# Write(data); #>> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName, assertMethod);
            return this;
        }

        public IPostAssertWithDataCaseBuilder<TSut<# Write(data); #>> Assert(string assertionTestCaseName,
            Action<TSut<# Write(data); #>> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName + " " + assertionTestCaseName, assertMethod);
            return this;
        }

        private void InternalAssert(string testName, Action<TSut<# Write(data); #>> assertMethod)
        {
            foreach (var data in _dataSuite.Data)
            {
                var d = data;
                string inject = NameInjection.Inject(testName, d);
                Action assertTestMethod = () =>
                {
                    TSut acted = _actFunc(d);
                    assertMethod(acted, d);
                };
                _tests.AddSingleTest(inject, assertTestMethod);
            }
        }

        public IEnumerable<ISingleRunnableTestCase> EmitAllRunnableTests()
        {
            return _tests.EmitAllRunnableTests();
        }
    }

<# manager.EndBlock();

}
 #>

<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>