<#@ template language="C#" hostspecific="True"#>
<#@ include file="Manager.ttinclude"#>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
// Code generated by a template
using System;
using Mercury.AssertBuilder;
using System.Collections.Generic;

namespace Mercury {
<# manager.EndBlock(); #>

<#
for (var dataTypeCount = 2; dataTypeCount < 5; dataTypeCount++)
{
    manager.StartNewFile("DataX" + dataTypeCount + ".generated.cs");
    var list = new List<string>();
	var outList = new List<string>();
    for (var d = 1; d <= dataTypeCount; d++)
    {
        list.Add("TData" + d);
		outList.Add("out TData" + d);
    }
    var allDataTypes = string.Join(", ", list);
	var allDataTypesWithOut = string.Join(", ", outList);
 #>

  public interface IAssertWithDataCaseBuilder<out TSut, <# Write(allDataTypesWithOut); #>>
  {
      IPostAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>> Assert(Action<TSut, <# Write(allDataTypes); #>> assertAction);
      IPostAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>> Assert(string assertionTestCaseName, Action<TSut, <# Write(allDataTypes); #>> assertAction);
  }

  public interface IPostAssertWithDataCaseBuilder<out TSut, <# Write(allDataTypesWithOut); #>> : ISpecification,
        IAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>>
  {
  }

  internal sealed class DataAssertBuilder<TSut, <# Write(allDataTypes); #>> : IPostAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>>
  {
        private readonly TestCaseAccumulator _tests = new TestCaseAccumulator();
        private readonly Func<<# Write(allDataTypes); #>, TSut> _actFunc;
        private readonly IDataSuite<Tuple<<# Write(allDataTypes); #>>> _dataSuite;

        public DataAssertBuilder(Func<<# Write(allDataTypes); #>, TSut> actFunc, IDataSuite<Tuple<<# Write(allDataTypes); #>>> dataSuite)
        {
            _actFunc = actFunc;
            _dataSuite = dataSuite;
        }

        public IPostAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>> Assert(Action<TSut, <# Write(allDataTypes); #>> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName, assertMethod);
            return this;
        }

        public IPostAssertWithDataCaseBuilder<TSut, <# Write(allDataTypes); #>> Assert(string assertionTestCaseName,
            Action<TSut, <# Write(allDataTypes); #>> assertMethod)
        {
            InternalAssert(_dataSuite.SuiteName + " " + assertionTestCaseName, assertMethod);
            return this;
        }

        private void InternalAssert(string testName, Action<TSut, <# Write(allDataTypes); #>> assertMethod)
        {
            foreach (var data in _dataSuite.Data)
            {
                var d = data;
                string inject = NameInjection.Inject(testName, d);
                Action assertTestMethod = () =>
                {
<#
    var args = new List<string>();
    for (var k = 1; k <= dataTypeCount; k++)
    {
        args.Add("d.Item" + k);
    }
    var allDataItemsCsv = String.Join(", ", args);
#>
                    TSut acted = _actFunc(<#Write(allDataItemsCsv); #>);
                    assertMethod(acted, <#Write(allDataItemsCsv); #>);
                };
                _tests.AddSingleTest(inject, assertTestMethod);
            }
        }

        public IEnumerable<ISingleRunnableTestCase> EmitAllRunnableTests()
        {
            return _tests.EmitAllRunnableTests();
        }
    }
<# manager.EndBlock();
}
#>
<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>
<# manager.Process(true); #>