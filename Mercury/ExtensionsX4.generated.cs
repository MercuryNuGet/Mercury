// Code generated by a template
using System;
using Mercury.AssertBuilder;
using System.Collections.Generic;

namespace Mercury
{
    public static class ExtensionsX4 {

        /// <summary>
        ///    Assert that passes result of act and last data item to function. Useful when placing expected as last data item.
        /// </summary>
        /// <typeparam name="TActual"></typeparam>
        /// <typeparam name="TUnusedData1"></typeparam>
        /// <typeparam name="TUnusedData2"></typeparam>
        /// <typeparam name="TUnusedData3"></typeparam>
        /// <typeparam name="TExpected"></typeparam>
        /// <param name="builder"></param>
        /// <param name="assertMethod"></param>
        /// <returns></returns>
        public static IPostAssertCaseBuilder<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected> Assert<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected>(
		      this IAssertCaseBuilder<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected> builder,
		           Action<TActual, TExpected> assertMethod){
            return builder.Assert((actual, unusedData1, unusedData2, unusedData3, expected) => assertMethod(actual, expected));
        }

		/// <summary>
        ///    Assert that passes result of act and last data item to function. Useful when placing expected as last data item.
        /// </summary>
        /// <typeparam name="TActual"></typeparam>
        /// <typeparam name="TUnusedData1"></typeparam>
        /// <typeparam name="TUnusedData2"></typeparam>
        /// <typeparam name="TUnusedData3"></typeparam>
        /// <typeparam name="TExpected"></typeparam>
        /// <param name="builder"></param>
		/// <param name="assertName"></param>
        /// <param name="assertMethod"></param>
        /// <returns></returns>
		public static IPostAssertCaseBuilder<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected> Assert<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected>(
		        this IAssertCaseBuilder<TActual, TUnusedData1, TUnusedData2, TUnusedData3, TExpected> builder,
		             string assertName,
				     Action<TActual, TExpected> assertMethod){
            return builder.Assert(assertName, (actual, unusedData1, unusedData2, unusedData3, expected) => assertMethod(actual, expected));
        }

    }
}
